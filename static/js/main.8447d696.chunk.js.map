{"version":3,"sources":["img/bgc.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledRulesButton.js","components/GameRules.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","position","StyledTetrisWrapper","styled","div","bgcImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","StyledRulesButton","GameRules","alert","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","direction","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPosition","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8447d696.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgc.2810fe6b.png\";","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => (\n    Array.from(Array(STAGE_HEIGHT), () => (\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    ))\n);\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for(let y = 0; y < player.tetromino.length; y += 1){\n        for(let x = 0; x < player.tetromino[y].length; x += 1){\n            // 1. Check that we're on an actual Tetromino cell\n            if(player.tetromino[y][x] !== 0){\n                if(\n                // 2. Check that our move is inside the game areas height - y\n                !stage[y + player.position.y + moveY] ||\n                // 3. Check that our move is inside the game areas width - x\n                !stage[y + player.position.y + moveY][x + player.position.x + moveX] ||\n                // 4. Check that the cell we're moving isn't set to clean\n                stage[y + player.position.y + moveY][x + player.position.x + moveX][1] !== 'clear'\n                ){\n                    return true;\n                }\n            }\n        }\n    }\n\n};","import styled from 'styled-components';\nimport bgcImage from '../../img/bgc.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgcImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0'},\n    I: { \n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0]\n        ],\n        color: '80, 227, 230',\n    },\n    J: { \n        shape: [\n            [0, 0, 'J', 0],\n            [0, 0, 'J', 0],\n            [0, 'J', 'J', 0]\n        ],\n        color: '36, 95, 223',\n    },\n    L: { \n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L']\n        ],\n        color: '223, 173, 36',\n    },\n    O: { \n        shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n        color: '223, 217, 36',\n    },\n    S: { \n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0],\n        ],\n        color: '48, 211, 36',\n    },\n    T: { \n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        color: '132, 61, 198',\n    },\n    Z: { \n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        color: '227, 78, 78',\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randomTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randomTetromino];\n}","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n    \n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => (\n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) === -1){\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, [])\n        );\n\n        const updateStage = prevStage => {\n            // First flush the stage\n            const newStage = prevStage.map(row => (\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n            ));\n\n            // Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0){\n                        newStage[y + player.position.y][x + player.position.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    };\n                });\n            });\n\n            // Then check if we collided\n            if(player.collided){\n                resetPlayer();\n                return sweepRows(newStage);\n            };\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n        \n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n<StyledCell type={type} color={TETROMINOS[type].color}/>\n);\n\nexport default React.memo(Cell);\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height}, \n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    max-width: 25vw;\n    width: 100%;\n    background: #111;\n`","import React from 'react';\nimport Cell from './Cell';\nimport { StyledStage } from './styles/StyledStage';\n\nconst Stage = ({ stage }) => (\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map(row => row.map((cell, x) => (\n            <Cell key={x} type={cell[0]}/>\n        )))}\n    </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n`","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDisplay props={gameOver}>\n        {text}\n    </StyledDisplay>\n);\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.div`\n    box-sizing: border-box;\n    margin: 0 0 15px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback}>\n        Start the game\n    </StyledStartButton>\n);\n\nexport default StartButton;","import styled from 'styled-components';\n\nexport const StyledRulesButton = styled.div`\n    font-size: 20px;\n    padding: 8px 4px 2px 7px;\n    cursor: pointer;\n    background: #000;\n    border-radius: 10px;\n    border: 3px solid #333;\n    outline: none;\n    color: #fff;\n    float: right;\n    text-transform: uppercase;\n    letter-spacing: 3px;\n    text-align: center;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n`;","import React from 'react';\nimport { StyledRulesButton } from './styles/StyledRulesButton';\n\nconst GameRules = () => {\n    const showRules = () => {\n        alert(\n            'Arrange the blocks to fill the whole row - then they will disappear and you will get points. Move the blocks using the left and right arrows on your keyboard, while the upper arrow is used to rotate the current block. You can also accelerate the falling of the block using the bottom arrow. You lose when the stack of blocks reach the top of the board. Have fun! :)'\n        )\n    };\n\n    return(<StyledRulesButton onClick={showRules}>?</StyledRulesButton>)\n};\n\nexport default GameRules;","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hook\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport GameRules from './GameRules';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPosition, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n    const movePlayer = direction => {\n        if(!checkCollision(player, stage, { x: direction, y: 0 })){\n            updatePlayerPosition({ x: direction, y: 0 });\n        };\n    };\n\n    const startGame = () => {\n        // Reset everything\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    };\n\n    const drop = () => {\n        // Increase level when player has cleared 10 rows\n        if(rows > (level + 1) * 10){\n            setLevel(prev => prev + 1);\n            // Increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        };\n\n        if(!checkCollision(player, stage, { x: 0, y: 1 })){\n            updatePlayerPosition({ x: 0, y: 1, collided: false });\n        }else{\n            // Game is over\n            if(player.position.y < 1){\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPosition({ x: 0, y: 0, collided: true });\n        };\n    };\n\n    const keyUp = ({ keyCode }) => {\n        if(!gameOver){\n            if(keyCode === 40){\n                setDropTime(1000 / (level + 1) + 200);\n            };\n        };\n    };\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    };\n\n    const move = ({ keyCode }) => {\n        if(!gameOver){\n            if(keyCode === 37){\n                movePlayer(-1);\n            }else if(keyCode === 39){\n                movePlayer(1);\n            }else if(keyCode === 40){\n                dropPlayer();\n            }else if(keyCode === 38){\n                playerRotate(stage, 1);\n            };\n        };\n    };\n    \n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    return(\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={e => keyUp(e)}>\n            <StyledTetris>\n                <Stage stage={stage}/>\n                <aside>\n                    {\n                        gameOver ?\n                        <Display gameOver={gameOver} text=\"Game Over!\"/> :\n                        (\n                            <div>\n                                <Display text={`Score ${score}`} />\n                                <Display text={`Rows ${rows}`} />\n                                <Display text={`Level ${level}`} />\n                            </div>\n                        )\n                    }\n                    <StartButton callback={startGame}/>\n                    <GameRules/>\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        position: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const updatePlayerPosition = ({ x, y, collided }) => {\n        setPlayer(prev => {\n            return({\n            ...prev,\n            position: { x: (prev.position.x += x ), y: (prev.position.y += y) },\n            collided,\n        })})\n    };\n\n    const rotate = (tetromino, direction) => {\n        // Make the rows to becom cols\n        const rotatedTetro = tetromino.map((_, index) => (\n            tetromino.map(col => col[index])\n        ));\n\n        // Reverse each row to get a rotated tetromino\n        if(direction > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();            \n    };\n\n    const playerRotate = (stage, direction) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\n\n        const position = clonedPlayer.position.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })){\n            clonedPlayer.position.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length){\n                rotate(clonedPlayer.tetromino, -direction);\n                clonedPlayer.position.x = position;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n    };\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPosition, resetPlayer, playerRotate];\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if(rowsCleared > 0){\n            // Original Tetris score calculating\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n\n        };\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n  <div className=\"app\">\n    <Tetris />\n  </div>\n)\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}